pipeline {  
    agent any  
      
    environment {  
        DOCKER_REGISTRY = 'your-registry.com'  
        IMAGE_NAME = 'fleet-manage-front'  
        IMAGE_TAG = "${env.BUILD_NUMBER}"  
    }  
      
    stages {  
        stage('Checkout') {  
            steps {  
                checkout scm  
            }  
        }  
          
        stage('Build Docker Image') {  
            steps {  
                script {  
                    docker.build("${DOCKER_REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG}")  
                }  
            }  
        }  
          
        stage('Push to Registry') {  
            steps {  
                script {  
                    docker.withRegistry("https://${DOCKER_REGISTRY}", 'docker-registry-credentials') {  
                        docker.image("${DOCKER_REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG}").push()  
                        docker.image("${DOCKER_REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG}").push('latest')  
                    }  
                }  
            }  
        }  
          
        stage('Deploy to Staging') {  
            steps {  
                sh """  
                    docker stop fleet-manage-front-staging || true  
                    docker rm fleet-manage-front-staging || true  
                    docker run -d --name fleet-manage-front-staging \  
                        -p 3000:3000 \  
                        ${DOCKER_REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG}  
                """  
            }  
        }  
          
        stage('Health Check') {  
            steps {  
                script {  
                    timeout(time: 2, unit: 'MINUTES') {  
                        waitUntil {  
                            script {  
                                def response = sh(  
                                    script: 'curl -s -o /dev/null -w "%{http_code}" http://localhost:3000',  
                                    returnStdout: true  
                                ).trim()  
                                return response == '200'  
                            }  
                        }  
                    }  
                }  
            }  
        }  
          
        stage('Deploy to Production') {  
            when {  
                branch 'main'  
            }  
            input {  
                message "Deploy to production?"  
                ok "Deploy"  
            }  
            steps {  
                sh """  
                    docker stop fleet-manage-front-prod || true  
                    docker rm fleet-manage-front-prod || true  
                    docker run -d --name fleet-manage-front-prod \  
                        -p 80:3000 \  
                        ${DOCKER_REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG}  
                """  
            }  
        }  
    }  
      
    post {  
        always {  
            sh 'docker system prune -f'  
        }  
        success {  
            slackSend(  
                color: 'good',  
                message: "Deployment successful: ${env.JOB_NAME} - ${env.BUILD_NUMBER}"  
            )  
        }  
        failure {  
            slackSend(  
                color: 'danger',  
                message: "Deployment failed: ${env.JOB_NAME} - ${env.BUILD_NUMBER}"  
            )  
        }  
    }  
}