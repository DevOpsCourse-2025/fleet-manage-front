pipeline {  
    agent any  
  
    environment {  
        REMOTE_IP = '40.233.6.181'  
        DOCKER_USER = 'jcq12'  
        IMAGE_TAG = 'latest'  
        FRONTEND_PROJECT = 'fleet-manage-front'  
    }  
  
    stages {  
        stage('Checkout') {  
            steps {  
                checkout scm  
            }  
        }  
  
        stage('Obtener cambios del frontend') {  
            steps {  
                copyArtifacts(  
                    projectName: 'fleet-manage-front-build',  
                    filter: 'frontend_changed.txt'  
                )  
            }  
        }  
  
        stage('Desplegar frontend') {  
            when {  
                expression {  
                    return fileExists('frontend_changed.txt') && readFile('frontend_changed.txt').trim() == 'true'  
                }  
            }  
            steps {  
                bat '''  
                    @echo off  
                    echo ===========================  
                    echo Desplegando %FRONTEND_PROJECT%  
                    echo Contenedor: fleet-manage-front  
                    echo Puerto: 3000  
                    echo ===========================  
  
                    ssh -i key.pem opc@%REMOTE_IP% sudo docker pull %DOCKER_USER%/%FRONTEND_PROJECT%:%IMAGE_TAG%  
  
                    ssh -i key.pem opc@%REMOTE_IP% sudo docker ps -a -q -f name=^/fleet-manage-front$ > nul && (  
                        echo Contenedor fleet-manage-front existe. Deteniéndolo y eliminándolo...  
                        ssh -i key.pem opc@%REMOTE_IP% sudo docker stop fleet-manage-front  
                        ssh -i key.pem opc@%REMOTE_IP% sudo docker rm fleet-manage-front  
                    ) || (  
                        echo Contenedor fleet-manage-front no existe. Continuando...  
                    )  
  
                    ssh -i key.pem opc@%REMOTE_IP% sudo docker run -d --name fleet-manage-front --network ms-network -p 3000:80 %DOCKER_USER%/%FRONTEND_PROJECT%:%IMAGE_TAG%  
                      
                    rem Conectar también a red-web si es necesario  
                    ssh -i key.pem opc@%REMOTE_IP% sudo docker network connect red-web fleet-manage-front  
                '''  
            }  
        }  
  
        stage('Health Check') {  
            steps {  
                script {  
                    sleep(15) // Esperar que el contenedor inicie  
                      
                    def response = bat(  
                        script: "ssh -i key.pem opc@${env.REMOTE_IP} curl -s -o /dev/null -w \"%{http_code}\" http://localhost:3000",  
                        returnStdout: true  
                    ).trim()  
                      
                    if (response != '200') {  
                        error("Health check failed. HTTP status: ${response}")  
                    } else {  
                        echo "Frontend desplegado exitosamente y respondiendo en puerto 3000"  
                    }  
                }  
            }  
        }  
    }  
  
    post {  
        always {  
            bat 'if exist frontend_changed.txt del frontend_changed.txt'  
        }  
  
        failure {  
            echo 'El deployment del frontend falló. Verifica los logs para más detalles.'  
        }  
  
        success {  
            echo 'Frontend desplegado exitosamente en el servidor remoto.'  
        }  
    }  
}